user  nobody;
worker_processes  auto;
worker_rlimit_nofile 4096;

events {
  worker_connections  2048;
}

http {
  include       mime.types;
  default_type  application/octet-stream;
  lua_package_path '~/lua/?.lua;;';

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;

  keepalive_timeout    65;
  types_hash_max_size  2048;

  upstream keycloak {
    server 192.168.2.50:8080;
  }
  upstream student-proxy {
    server 192.168.2.50:9081;
  }
  upstream teacher-proxy {
    server 192.168.2.50:9082;
  }
  upstream admin-proxy {
    server 192.168.2.50:9083;
  }
  upstream student {
    server 192.168.2.50:5173;
  }
  upstream teacher {
    server 192.168.2.50:5174;
  }
  upstream admin {
    server 192.168.2.50:5500;
  }

  init_by_lua_block {
    function has_role(role_to_check, roles)
      for _, role in ipairs(roles) do
        if role_to_check == role then
          return true
        end
      end
      return false
    end

    function verify_jwt(realm, role, token_name)
		  local opts = {
		    discovery = "http://192.168.2.50:8080/auth/realms/" .. realm .. "/.well-known/openid-configuration",
		    token_signing_alg_values_expected = { "RS256" },
		    auth_accept_token_as = "cookie:" .. token_name, 
		    pass_cookies = token_name 
		  }
		  local res, err = require("resty.openidc").bearer_jwt_verify(opts)
		  if err then
		    local cjson = require("cjson")
				local timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
				local unauthorized = {
					status = ngx.HTTP_UNAUTHORIZED,
					timestamp = timestamp,
					error = err and err or "no access_token provided"
				}
			  ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.header["Content-Type"] = "application/json"
		    ngx.say(cjson.encode(unauthorized))
		    ngx.exit(ngx.HTTP_UNAUTHORIZED)
		  end
      if has_role(role, res.realm_access.roles) then
	      ngx.req.set_header("X-Role", res.sub)
        if role == "student" or role == "teacher" then
	        ngx.req.set_header("X-User-Id", res.sub)
	        ngx.req.set_header("X-Department-Id", res.dep_id)
	        ngx.req.set_header("X-University-Id", res.uni_id)
        end
      else
				local forbidden = {
					status = ngx.HTTP_FORBIDDEN,
					timestamp = timestamp,
					error = "Forbidden"
				}
			  ngx.status = ngx.HTTP_FORBIDDEN
        ngx.header["Content-Type"] = "application/json"
		    ngx.say(cjson.encode(forbidden))
		    ngx.exit(ngx.HTTP_FORBIDDEN)
      end
    end
  }

  server {
    listen 80;
    server_name localhost;

    location /auth {
      proxy_pass http://keycloak;
      include proxy_params;
    }



    location /student {
      proxy_pass http://student;
      include proxy_params;
    }

    location /student/documents {
      access_by_lua_block {
        verify_jwt("student", "student", "STUDENT_TOKEN") 
      }
      proxy_pass http://student-proxy;
      include proxy_params;
    }

    location /rest/student {
      access_by_lua_block {
        verify_jwt("student", "student", "STUDENT_TOKEN") 
      }
      proxy_pass http://student-proxy;
      include proxy_params;
    }



    location /teacher {
      proxy_pass http://teacher;
      include proxy_params;
    }

    location /teacher/documents {
      access_by_lua_block {
        verify_jwt("teacher", "teacher", "TEACHER_TOKEN")
      }
      proxy_pass http://teacher-proxy;
      include proxy_params;
    }

    location /rest/teacher {
      access_by_lua_block {
        verify_jwt("teacher", "teacher", "TEACHER_TOKEN")
      }
      proxy_pass http://teacher;
      include proxy_params;
    }



    location /admin {
      proxy_pass http://admin;
      include proxy_params;
    }

    location /admin/documents {
      access_by_lua_block {
        verify_jwt("admin", "admin", "ADMIN_TOKEN")
      }
      proxy_pass http://admin-proxy;
      include proxy_params;
    }

    location /rest/admin {
      access_by_lua_block {
        verify_jwt("admin", "admin", "ADMIN_TOKEN")
      }
      client_max_body_size 50M;
      proxy_pass http://admin-proxy;
      include proxy_params;
    }
   
      

    location / {
      root /usr/local/openresty/nginx/html/;
      index index.html index.htm;
      try_files $uri $uri/ /index.html;
    }

    error_page 404 /404.html;
      location = /404.html {
      root /usr/local/openresty/nginx/html;
    }

    error_page 500 502 503 504 /50x.html;
      location = /50x.html {
      root /usr/local/openresty/nginx/html;
    }

  }
}
